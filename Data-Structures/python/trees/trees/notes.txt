# # in order traversal : your root in the middle you visit the left tree then right tree
# [7,12,14,15,20,23,27,88]
# # pre order traversal: your root first then left tree then right tree
# [15,12,7,14,27,20,23,88]
# # post order traversal: your root at the end then left tree then right tree 
# [7,14,12,23,20,88,27,15]
# # remember the child is root for the element below.

class Binary_Tree:
    def __init__(self,value=None):
        self.value = value
        self.left = None
        self.right = None

    def add(self,value):
        if value == self.value:
            return
        if value < self.value:
            if self.left:
                self.left.add(value)
            else:
                self.left = Binary_Tree(value)
        
        if value > self.value:
            if self.right:
                self.right.add(value)
            else:
                self.right = Binary_Tree(value)
    
    def in_order(self):
        elements = []
        if self.left:
            elements += self.left.in_order()
        elements.append(self.value)

        if self.right:
            elements += self.right.in_order()
        
        return elements

    def pre_order(self):
        elements = [self.value]

        if self.left:
  
            elements += self.left.pre_order()
       

        if self.right:

            elements += self.right.pre_order()
        
        return elements

    def post_order(self):
        elements = []
        if self.left:
            elements += self.left.post_order()
        

        if self.right:
            elements += self.right.post_order()
        
        elements.append(self.value)
        
        return elements

    def contains(self,value):
        if self.value == value:
            return True
        if value < self.value:
            if self.left:
                return self.left.contains(value)
            else:
                return False
        if value > self.value:
            if self.right:
                return self.right.contains(value)
            else:
                return False

    def tree_max(self):
        if self.pre_order()==None:
            return 'empty tree'
        return max(self.pre_order())

    def tree_max(self):
        if self.pre_order()==None:
            return 'empty tree'
        else:
            arr = self.pre_order()
            max = 0
            for i in arr:
                if i > max:
                    max = i
        return  max

        

def build_tree(elements):
    root = Binary_Tree(elements[0])

    for i in range(1,len(elements)):
        root.add(elements[i])

    return root 



# def breadth_first(tree):
#     arr=[]
#     arr+=[tree.value]
#     count = 5
    

#     while 5:
#         if tree.left:
#             arr+=[tree.left.value]

#         if tree.right:
#             arr+=[tree.right.value]

   
    
    


#     return arr


    

if __name__ == '__main__':
    
    nums = [17,4,1,20,9,23,18,34,18,4]
    nums_tree = build_tree(nums)
    
    print(nums_tree.contains(4))
    print(nums_tree.contains(5))
    print(nums_tree.tree_max())   
    
    print(nums_tree.tree_max())

    # print(breadth_first(nums_tree))




    






# ALGORITHM breadthFirst(root)
# // INPUT  <-- root node
# // OUTPUT <-- front node of queue to console

#   Queue breadth <-- new Queue()
#   breadth.enqueue(root)

#   while breadth.peek()
#     node front = breadth.dequeue()
#     OUTPUT <-- front.value

#     if front.left is not NULL
#       breadth.enqueue(front.left)

#     if front.right is not NULL
#       breadth.enqueue(front.right)


            



        

